{
  "name": "MySQL",
  "scopeName": "source.sql",
  "fileTypes": ["sql"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#dataTypes"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#errorHighlighting"
    },
    {
      "include": "#advancedOperators"
    },
    {
      "include": "#temporalDataFunctions"
    },
    {
      "include": "#userDefinedSyntax"
    },
    {
      "include": "#nestedQueries"
    },
    {
      "include": "#macroEmbeddedSQL"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.sql",
          "match": "--.*$"
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.hash.sql",
          "match": "#.*$"
        },
        {
          "name": "comment.conditional.sql",
          "begin": "/\\*!",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sql",
          "match": "(?i)\\b(SELECT|INSERT|UPDATE|DELETE|FROM|WHERE|JOIN|LEFT|RIGHT|INNER|OUTER|ON|GROUP BY|ORDER BY|ASC|DESC|HAVING|AS|LIMIT|OFFSET|DISTINCT|UNION|ALL|INTO|VALUES|CREATE|TABLE|ALTER|DROP|DATABASE|INDEX|VIEW|TRIGGER|PROCEDURE|FUNCTION|IF|ELSE|THEN|END|LOOP|WHILE|REPEAT|DECLARE|SET|CALL|BEGIN|COMMIT|ROLLBACK|GRANT|REVOKE|USE|SHOW|DESCRIBE|EXPLAIN|LOCK|UNLOCK|WITH|RECURSIVE|CASE|WHEN|DEFAULT|FOREIGN|PRIMARY|KEY|AUTO_INCREMENT|REFERENCES|CONSTRAINT|CHECK|DEFAULT|UNIQUE|PARTITION BY|WINDOW|CUME_DIST|RANK|DENSE_RANK|ROW_NUMBER|WITH ROLLUP)\\b"
        }
      ]
    },
    "dataTypes": {
      "patterns": [
        {
          "name": "storage.type.sql",
          "match": "(?i)\\b(INT|INTEGER|SMALLINT|TINYINT|MEDIUMINT|BIGINT|DECIMAL|NUMERIC|FLOAT|DOUBLE|REAL|BIT|BOOLEAN|CHAR|VARCHAR|TEXT|TINYTEXT|MEDIUMTEXT|LONGTEXT|BLOB|TINYBLOB|MEDIUMBLOB|LONGBLOB|DATE|TIME|DATETIME|TIMESTAMP|YEAR|JSON|ENUM|SET)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.sql",
          "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM|UCASE|LCASE|MID|LEN|ROUND|NOW|FORMAT|CURDATE|CURTIME|DATE_ADD|DATE_SUB|DATEDIFF|TIMEDIFF|IFNULL|ISNULL|COALESCE|GREATEST|LEAST|CONCAT|SUBSTRING|CHAR_LENGTH|POSITION|LOCATE|INSTR|REPLACE|TRIM|LPAD|RPAD|CONVERT|CAST|UNHEX|HEX|MD5|SHA1|SHA2|AES_ENCRYPT|AES_DECRYPT|UUID|FLOOR|CEIL|CEILING|POWER|EXP|LOG|LN|PI|SIN|COS|TAN|ASIN|ACOS|ATAN|ATAN2|DEGREES|RADIANS|SIGN|SQRT|DATE_FORMAT|TIME_TO_SEC|SEC_TO_TIME|JSON_TABLE|ST_Distance)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.sql",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "''"
            }
          ]
        },
        {
          "name": "string.quoted.double.sql",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "\"\""
            }
          ]
        },
        {
          "name": "string.quoted.multi-line.sql",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "''''"
            }
          ]
        },
        {
          "name": "string.quoted.backtick.sql",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.sql",
              "match": "``"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.sql",
          "match": "\\b\\d+(\\.\\d+)?(e[+-]?\\d+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.sql",
          "match": "[=><!~]+|(?i)\\b(AND|OR|NOT|IN|BETWEEN|LIKE|IS|NULL|EXISTS|ANY|ALL)\\b"
        }
      ]
    },
    "advancedOperators": {
      "patterns": [
        {
          "name": "keyword.operator.advanced.sql",
          "match": "(\\->|\\->>|\\||\\&|\\^|\\~)"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.sql",
          "match": "@[a-zA-Z0-9_]+"
        },
        {
          "name": "variable.global.sql",
          "match": "@@global\\.[a-zA-Z0-9_]+"
        },
        {
          "name": "variable.session.sql",
          "match": "@@session\\.[a-zA-Z0-9_]+"
        }
      ]
    },
    "errorHighlighting": {
      "patterns": [
        {
          "name": "invalid.illegal.sql",
          "match": "(?i)\\b(ERROR|UNEXPECTED|INCOMPLETE)\\b"
        },
        {
          "name": "invalid.unclosed.string.sql",
          "begin": "'",
          "while": "(?:(?!').)*$"
        }
      ]
    },
    "temporalDataFunctions": {
      "patterns": [
        {
          "name": "support.function.temporal.sql",
          "match": "(?i)\\b(DATE_ADD|DATE_SUB|DATE_FORMAT|CURDATE|CURTIME|TIME_TO_SEC|SEC_TO_TIME|DATEDIFF|TIMEDIFF)\\b"
        }
      ]
    },
    "nestedQueries": {
      "patterns": [
        {
          "name": "meta.query.subquery.sql",
          "begin": "(?i)\\(SELECT",
          "end": "\\)",
          "patterns": [
            {
              "include": "#keywords"
            }
          ]
        }
      ]
    },
    "macroEmbeddedSQL": {
      "patterns": [
        {
          "name": "meta.embedded.block.sql",
          "begin": "<%",
          "end": "%>",
          "patterns": [
            {
              "include": "source.language-specific"
            }
          ]
        }
      ]
    },
    "userDefinedSyntax": {
      "patterns": [
        {
          "name": "support.function.user-defined.sql",
          "match": "(?i)\\b(\\w+)\\b"
        }
      ]
    }
  }
}
